import type { BaseQueryParamsProps } from 'src/helpers/http';
import type { PaginationProps } from 'src/helpers/pagination';

export interface Paginated{{ModelName}} extends PaginationProps {
  data: Create{{ModelName}}Dto[];
}

export type {{ModelName}}QueryParamsProps = BaseQueryParamsProps;

export class Create{{ModelName}}Dto {
  constructor(partial: Partial<Create{{ModelName}}Dto>) {
    Object.assign(this, partial);
  }

{{#each fields}}
    {{!-- stable decorator order: IsUUID, IsOptional (when not required), then type validators --}}
    {{#if (inArray validators "IsUUID")}}
  @IsUUID('4', { message: 'The {{name}} must be a valid UUID.' })
    {{/if}}
    {{#if (inArray validators "IsOptional")}}
  @IsOptional()
    {{/if}}
    {{#if (inArray validators "IsString")}}
  @IsString({ message: 'The {{name}} must be a string.' })
    {{/if}}
    {{#if (inArray validators "IsBoolean")}}
  @IsBoolean({ message: 'The {{name}} must be a boolean.' })
    {{/if}}
    {{#if (inArray validators "IsNumber")}}
  @IsNumber({}, { message: 'The {{name}} must be a number.' })
    {{/if}}
    {{#if (inArray validators "IsDate")}}
  @IsDate({ message: 'The {{name}} must be a valid date.' })
    {{/if}}
    {{#if (inArray validators "IsEnum")}}
  @IsEnum({{tsType}}, { message: 'The {{name}} must be a valid {{tsType}}.' })
    {{/if}}
    {{#if (inArray validators "IsObject")}}
  @IsObject({ message: 'The {{name}} must be an object.' })
    {{/if}}
  {{name}}{{#unless isRequired}}?{{/unless}}: {{{tsType}}};

{{/each}}
}
